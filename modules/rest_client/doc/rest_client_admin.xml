<!-- Module User's Guide -->

<chapter>

	<title>&adminguide;</title>

	<section id="overview" xreflabel="Overview">
	<title>Overview</title>
	<para>
	The <emphasis>rest_client</emphasis> module provides a means of interacting
	with an HTTP server by doing RESTful queries, such as GET, POST and PUT.
	</para>
	</section>

	<section id="dependencies" xreflabel="Dependencies">
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>No dependencies on other &osips; modules.</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>

	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before
		running &osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>libcurl</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>

	<section id="exported_parameters" xreflabel="Exported Parameters">
		<title>Exported Parameters</title>
	<section id="param_curl_timeout" xreflabel="curl_timeout">
		<title><varname>curl_timeout</varname> (integer)</title>
		<para>
		The maximum allowed time for any HTTP(S) transfer to complete.  This
		interval is inclusive of the initial connect time window, hence the value
		of this parameter must be greater than or equal to
		<xref linkend="param_connection_timeout"/>.
		</para>
		<para>
		<emphasis>
			Default value is <quote>20</quote> seconds.
		</emphasis>
		</para>
		<example>
		<title>Setting the <varname>curl_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("rest_client", "curl_timeout", 10)
...
</programlisting>
		</example>
	</section>

	<section id="param_connection_timeout" xreflabel="connection_timeout">
		<title><varname>connection_timeout</varname> (integer)</title>
		<para>
		The maximum allowed time to establish a connection with the server.
		</para>
		<para>
		<emphasis>
			Default value is <quote>20</quote> seconds.
		</emphasis>
		</para>
		<example>
		<title>Setting the <varname>connection_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("rest_client", "connection_timeout", 4)
...
</programlisting>
		</example>
	</section>

	<section id="param_connect_poll_interval" xreflabel="connect_poll_interval">
		<title><varname>connect_poll_interval</varname> (integer)</title>
		<para>
		Only relevant with async requests.  Allows complete control over how
		quickly we want to detect libcurl's completed blocking TCP handshakes,
		so the async transfers can be put in the background.  A lower
		<xref linkend="param_connect_poll_interval"/> may speed up all async
		HTTP transfers, but will also increase CPU usage.
		</para>
		<para>
		<emphasis>
			Default value is <quote>20</quote> milliseconds.
		</emphasis>
		</para>
		<example>
		<title>Setting the <varname>connect_poll_interval</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("rest_client", "connect_poll_interval", 2)
...
</programlisting>
		</example>
	</section>

	<section id="param_max_async_transfers" xreflabel="max_async_transfers">
		<title><varname>max_async_transfers</varname> (integer)</title>
		<para>
		Maximum number of asynchronous HTTP transfers <emphasis>a single</emphasis>
		OpenSIPS worker is allowed to run simultaneously. As long as this threshold
		is reached for a worker, all new async transfers it attempts to perform
		will be done in a blocking manner, with appropriate logging warnings.
		</para>
		<para>
		<emphasis>
			Default value is <quote>100</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting the <varname>max_async_transfers</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("rest_client", "max_async_transfers", 300)
...
</programlisting>
		</example>
	</section>

	<section id="param_ssl_verifypeer" xreflabel="ssl_verifypeer">
		<title><varname>ssl_verifypeer</varname> (integer)</title>
		<para>
		Set this to 0 in order to disable the verification of the remote peer's
		certificate. Verification is done using a default bundle of CA certificates
		which come with libcurl.
		</para>
		<para>
		<emphasis>
			Default value is <quote>1</quote> (enabled).
		</emphasis>
		</para>
		<example>
		<title>Setting the <varname>ssl_verifypeer</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("rest_client", "ssl_verifypeer", 0)
...
</programlisting>
		</example>
	</section>

	<section id="param_ssl_verifyhost" xreflabel="ssl_verifyhost">
		<title><varname>ssl_verifyhost</varname> (integer)</title>
		<para>
		Set this to 0 in order to disable the verification that the remote peer
		actually corresponds to the server listed in the certificate.
		</para>
		<para>
		<emphasis>
			Default value is <quote>1</quote> (enabled).
		</emphasis>
		</para>
		<example>
		<title>Setting the <varname>ssl_verifyhost</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("rest_client", "ssl_verifyhost", 0)
...
</programlisting>
		</example>
	</section>

	<section id="param_ssl_capath" xreflabel="ssl_capath">
		<title><varname>ssl_capath</varname> (integer)</title>
		<para>
		An optional path for CA certificates to be used for host verifications.
		</para>
		<example>
		<title>Setting the <varname>ssl_capath</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("rest_client", "ssl_capath", "/home/opensips/ca_certificates")
...
</programlisting>
		</example>
	</section>

	</section>

	<section id="exported_functions" xreflabel="exported_functions">
	<title>Exported Functions</title>
	<section id="func_rest_get" xreflabel="rest_get()">
		<title>
		<function moreinfo="none">rest_get(url, body_pv[, [ctype_pv][, [retcode_pv]]])</function>
		</title>
		<para>
		Perform a blocking HTTP GET on the given <emphasis>url</emphasis> and
		return a representation of the resource.
		</para>
		<para>
		The <emphasis>body_pv</emphasis> pseudo-var will hold the body of the HTTP
		response.
		</para>
		<para>
		The optional <emphasis>ctype_pv</emphasis> pseudo-var will contain the value
		of the "Content-Type:" header of the response.
		</para>
		<para>
		The optional <emphasis>retcode_pv</emphasis> pseudo-var will retain the
		status code of the HTTP response.  A <emphasis role='bold'>0</emphasis>
		status code value means no HTTP reply arrived at all.
		</para>

		<para><emphasis role='bold'>Parameter Types</emphasis></para>
		<itemizedlist>
		<listitem>
			<para><emphasis>url</emphasis> - string, pseudo-variable or
				pseudo-variable format string
			</para>
		</listitem>
		<listitem>
			<para><emphasis>body_pv, ctype_pv, retcode_pv</emphasis> -
			pseudo-variables</para>
		</listitem>
		</itemizedlist>

		&rest_return_codes;

		<para>
		This function can be used from any route.
		</para>
		<example>
		<title><function moreinfo="none">rest_get</function> usage</title>
		<programlisting format="linespecific">
...
# Example of querying a REST service to get the credit of an account
$var(rc) = rest_get("https://getcredit.org/?account=$fU",
                    "$var(credit)",
                    "$var(ct)",
                    "$var(rcode)");
if ($var(rc) &lt; 0) {
	xlog("rest_get() failed with $var(rc), acc=$fU\n");
	send_reply("500", "Server Internal Error");
	exit;
}

if ($var(rcode) != 200) {
	xlog("L_INFO", "rest_get() rcode=$var(rcode), acc=$fU\n");
	send_reply("403", "Forbidden");
	exit;
}
...
</programlisting>
		</example>
	</section>
	<section id="func_rest_post" xreflabel="rest_post()">
		<title>
		<function moreinfo="none">rest_post(url, send_body_pv, [send_ctype_pv],
				recv_body_pv[, [recv_ctype_pv][, [retcode_pv]]])
		</function>
		</title>
		<para>
		Perform a blocking HTTP POST on the given <emphasis>url</emphasis>.  The request body will
		be copied from the <emphasis>send_body_pv</emphasis> pseudo-variable. The MIME Content-Type
		header for the request will be taken from <emphasis>send_ctype_pv</emphasis> (the default is
		<emphasis>"application/x-www-form-urlencoded"</emphasis>)
		</para>
		<para>
		Note that the <emphasis>send_body_pv</emphasis> parameter can also accept a format-string
		but it cannot be larger than 1024 bytes. For larger messages, you must build them in a
		pseudo-variable and pass it to the function.
		</para>
		<para>
		The mandatory <emphasis>recv_body_pv</emphasis> pseudo-var will hold the body of the HTTP
		response.
		</para>
		<para>
		The optional <emphasis>recv_ctype_pv</emphasis> parameter will contain
		the value of the "Content-Type" header of the response.
		</para>
		<para>
		The optional <emphasis>retcode_pv</emphasis> pseudo-var will retain the
		status code of the HTTP response.  A <emphasis role='bold'>0</emphasis>
		status code value means no HTTP reply arrived at all.
		</para>

		<para><emphasis role='bold'>Parameter Types</emphasis></para>
		<itemizedlist>
		<listitem>
			<para><emphasis>url, send_body_pv, send_type_pv</emphasis> -
				string, pseudo-variable or pseudo-variable format string
			</para>
		</listitem>
		<listitem>
			<para><emphasis>body_pv, ctype_pv, retcode_pv</emphasis> -
			pseudo-variables</para>
		</listitem>
		</itemizedlist>

		&rest_return_codes;

		<para>
		This function can be used from any route.
		</para>
		<example>
		<title><function moreinfo="none">rest_post</function> usage</title>
		<programlisting format="linespecific">
...
# Creating a resource using a RESTful service with an HTTP POST request
$var(rc) = rest_post("https://myserver.org/register_user",
                     "$fU", , "$var(body)", "$var(ct)", "$var(rcode)");
if ($var(rc) &lt; 0) {
	xlog("rest_post() failed with $var(rc), user=$fU\n");
	send_reply("500", "Server Internal Error 1");
	exit;
}

if ($var(rcode) != 200) {
	xlog("rest_post() rcode=$var(rcode), user=$fU\n");
	send_reply("500", "Server Internal Error 2");
	exit;
}
...

</programlisting>
		</example>
	</section>
	<section id="func_rest_put" xreflabel="rest_put()">
		<title>
		<function moreinfo="none">rest_put(url, send_body_pv, [send_ctype_pv],
				recv_body_pv[, [recv_ctype_pv][, [retcode_pv]]])
		</function>
		</title>
		<para>
		Perform a blocking HTTP PUT on the given <emphasis>url</emphasis>.  The request body will
		be copied from the <emphasis>send_body_pv</emphasis> pseudo-variable. The MIME Content-Type
		header for the request will be taken from <emphasis>send_ctype_pv</emphasis> (the default is
		<emphasis>"application/x-www-form-urlencoded"</emphasis>)
		</para>
		<para>
		Similar to <xref linkend="func_rest_post"/>, the <emphasis>send_body_pv</emphasis>
		parameter can also accept a format-string but it cannot be larger than 1024 bytes. For
		larger messages, you must build them in a pseudo-variable and pass it to the function.
		</para>
		<para>
		The mandatory <emphasis>recv_body_pv</emphasis> pseudo-var will hold the body of the HTTP
		response.
		</para>
		<para>
		The optional <emphasis>recv_ctype_pv</emphasis> parameter will contain
		the value of the "Content-Type" header of the response message.
		</para>
		<para>
		The optional <emphasis>retcode_pv</emphasis> pseudo-var will retain the
		status code of the HTTP response.  A <emphasis role='bold'>0</emphasis>
		status code value means no HTTP reply arrived at all.
		</para>

		<para><emphasis role='bold'>Parameter Types</emphasis></para>
		<itemizedlist>
		<listitem>
			<para><emphasis>url, send_body_pv, send_type_pv</emphasis> -
				string, pseudo-variable or pseudo-variable format string
			</para>
		</listitem>
		<listitem>
			<para><emphasis>body_pv, ctype_pv, retcode_pv</emphasis> -
			pseudo-variables</para>
		</listitem>
		</itemizedlist>

		&rest_return_codes;

		<para>
		This function can be used from any route.
		</para>
		<example>
		<title><function moreinfo="none">rest_put</function> usage</title>
		<programlisting format="linespecific">
...
# Creating/Updating a resource using a RESTful service with an HTTP PUT request
$var(rc) = rest_put("https://myserver.org/users/$fU",
                    "$var(userinfo)", , "$var(body)", "$var(ct)", "$var(rcode)");
if ($var(rc) &lt; 0) {
	xlog("rest_put() failed with $var(rc), user=$fU\n");
	send_reply("500", "Server Internal Error 3");
	exit;
}

if ($var(rcode) != 200) {
	xlog("rest_put() rcode=$var(rcode), user=$fU\n");
	send_reply("500", "Server Internal Error 4");
	exit;
}
...
</programlisting>
		</example>
	</section>
	<section id="func_rest_append_hf" xreflabel="rest_append_hf()">
		<title>
		<function moreinfo="none">rest_append_hf(txt)</function>
		</title>
		<para>
		Append <emphasis>txt</emphasis> to the HTTP headers of the subsequent request.
		Multiple headers can be appended by making multiple calls
		before executing a request.
		</para>
		<para>
		The contents of <emphasis>txt</emphasis> should adhere to the
		specification for HTTP headers (ex. Field: Value)
		</para>
		<para>Parameter types</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>txt</emphasis> - String, pseudo-variable, or a String which includes pseudo-variables. (useful for specifying additional attribute-value fields in the URL)
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from any route.
		</para>
		<example>
		<title><function moreinfo="none">rest_append_hf</function> usage</title>
		<programlisting format="linespecific">
...
# Example of querying a REST service requiring additional headers

rest_append_hf("Authorization: Bearer mF_9.B5f-4.1JqM");
$var(rc) = rest_get("http://getcredit.org/?account=$fU", "$var(credit)");
...
		</programlisting>
		</example>
	</section>
	<section id="func_rest_init_client_tls" xreflabel="rest_init_client_tls()">
		<title>
		<function moreinfo="none">rest_init_client_tls(tls_client_domain)</function>
		</title>
		<para>
		Force a specific TLS certificate and private key pair to be eventually
		used during the next request. Refer to the tls_mgm module for
		additional info regarding TLS client domains.
		</para>
		<para>
		If using this function, you must also ensure that tls_mgm is loaded
		and properly configured.
		</para>
		<para>
		Note that if you want to use this feature, the certificate must be
		provisioned in the configuration file, NOT in the database. In case you
		are loading TLS certificates from the database, you must at least
		define the default domain in the configuration script, where is
		currently the only place you can define it.
		</para>
		<para>Parameter types</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>tls_client_domain</emphasis> - string,
			pseudo-variable, or a string which includes pseudo-variables.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from any route.
		</para>
		<example>
		<title><function moreinfo="none">rest_init_client_tls</function> usage</title>
		<programlisting format="linespecific">
...
rest_init_client_tls("1=10.11.12.13:3306");
if (!rest_get("https://example.com"))
    xlog("query failed\n");
...
		</programlisting>
		</example>
	</section>
	</section>

	<section>
	<title>Exported Asynchronous Functions</title>
	<section id="afunc_rest_get" xreflabel="rest_get()">
		<title>
		<function moreinfo="none">rest_get(url, body_pv[, [ctype_pv][, [retcode_pv]]])
		</function>
		</title>
		<para>
		Perform an asynchronous HTTP GET.  This function behaves exactly the same as
		<emphasis role='bold'><xref linkend="func_rest_get"/></emphasis>
		(in terms of input, output and processing),
		but in a non-blocking manner.  Script execution is suspended until the
		entire content of the HTTP response is available.
		</para>
		<example>
		<title><function moreinfo="none">async rest_get</function> usage</title>
		<programlisting format="linespecific">
route {
	...
	async(rest_get("http://getcredit.org/?account=$fU",
	               "$var(credit)", , "$var(rcode)"), resume);
}

route [resume] {
	$var(rc) = $rc;
	if ($var(rc) &lt; 0) {
		xlog("async rest_get() failed with $var(rc), acc=$fU\n");
		send_reply("500", "Server Internal Error");
		exit;
	}

	if ($var(rcode) != 200) {
		xlog("L_INFO", "async rest_get() rcode=$var(rcode), acc=$fU\n");
		send_reply("403", "Forbidden");
		exit;
	}

	...
}
</programlisting>
		</example>
	</section>

	<section id="afunc_rest_post" xreflabel="rest_post()">
		<title>
		<function moreinfo="none">rest_post(url, send_body_pv, [send_ctype_pv],
				recv_body_pv[, [recv_ctype_pv][, [retcode_pv]]])
		</function>
		</title>
		<para>
		Perform an asynchronous HTTP POST.  This function behaves exactly the same as
		<emphasis role='bold'><xref linkend="func_rest_post"/></emphasis> (in
		terms of input, output and processing), but in a non-blocking manner.
		Script execution is suspended until the entire content of the HTTP
		response is available.
		</para>
		<example>
		<title><function moreinfo="none">async rest_post</function> usage</title>
		<programlisting format="linespecific">
route {
	...
	async(rest_post("http://myserver.org/register_user",
	                "$fU", , "$var(body)", "$var(ct)", "$var(rcode)"), resume);
}

route [resume] {
	$var(rc) = $rc;
	if ($var(rc) &lt; 0) {
		xlog("async rest_post() failed with $var(rc), user=$fU\n");
		send_reply("500", "Server Internal Error 1");
		exit;
	}
	if ($var(rcode) != 200) {
		xlog("async rest_post() rcode=$var(rcode), user=$fU\n");
		send_reply("500", "Server Internal Error 2");
		exit;
	}

	...
}

</programlisting>
		</example>
	</section>

	<section id="afunc_rest_put" xreflabel="rest_put()">
		<title>
		<function moreinfo="none">rest_put(url, send_body_pv, [send_ctype_pv],
				recv_body_pv[, [recv_ctype_pv][, [retcode_pv]]])
		</function>
		</title>
		<para>
		Perform an asynchronous HTTP PUT.  This function behaves exactly the same as
		<emphasis role='bold'><xref linkend="func_rest_put"/></emphasis> (in
		terms of input, output and processing), but in a non-blocking manner.
		Script execution is suspended until the entire content of the HTTP
		response is available.
		</para>
		<example>
		<title><function moreinfo="none">async rest_put</function> usage</title>
		<programlisting format="linespecific">
route {
	...
	async(rest_put("http://myserver.org/users/$fU", "$var(userinfo)", ,
	               "$var(body)", "$var(ct)", "$var(rcode)"), resume);
}

route [resume] {
	$var(rc) = $rc;
	if ($var(rc) &lt; 0) {
		xlog("async rest_put() failed with $var(rc), user=$fU\n");
		send_reply("500", "Server Internal Error 3");
		exit;
	}
	if ($var(rcode) != 200) {
		xlog("async rest_put() rcode=$var(rcode), user=$fU\n");
		send_reply("500", "Server Internal Error 4");
		exit;
	}

	...
}
</programlisting>
		</example>
	</section>

	</section>


</chapter>
